
version: '3.8'

services:
  # Backend Flask
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: blumenau-flood-backend
    environment:
      - FLASK_ENV=production
      - FLASK_DEBUG=0
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
    volumes:
      - ./Data:/app/Data:ro
      - ./logs:/app/logs
      - /etc/localtime:/etc/localtime:ro
    networks:
      - bravo-network
      - internal
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:5000/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=bravo-network"
      
      # Backend API routes
      - "traefik.http.routers.blumenau-api.rule=Host(`parralab.site`) && PathPrefix(`/api`)"
      - "traefik.http.routers.blumenau-api.entrypoints=websecure"
      - "traefik.http.routers.blumenau-api.tls.certresolver=letsencryptresolver"
      - "traefik.http.routers.blumenau-api.service=blumenau-api"
      - "traefik.http.services.blumenau-api.loadbalancer.server.port=5000"
      
      # Middleware para remover /api do path
      - "traefik.http.middlewares.blumenau-api-stripprefix.stripprefix.prefixes=/api"
      - "traefik.http.routers.blumenau-api.middlewares=blumenau-api-stripprefix"

  # Frontend React
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: blumenau-flood-frontend
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - bravo-network
      - internal
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=bravo-network"
      
      # Frontend routes
      - "traefik.http.routers.blumenau-frontend.rule=Host(`parralab.site`)"
      - "traefik.http.routers.blumenau-frontend.entrypoints=websecure"
      - "traefik.http.routers.blumenau-frontend.tls.certresolver=letsencryptresolver"
      - "traefik.http.routers.blumenau-frontend.service=blumenau-frontend"
      - "traefik.http.services.blumenau-frontend.loadbalancer.server.port=80"
      
      # Headers de seguran√ßa
      - "traefik.http.middlewares.blumenau-security.headers.frameDeny=true"
      - "traefik.http.middlewares.blumenau-security.headers.contentTypeNosniff=true"
      - "traefik.http.middlewares.blumenau-security.headers.browserXssFilter=true"
      - "traefik.http.middlewares.blumenau-security.headers.referrerPolicy=strict-origin-when-cross-origin"
      - "traefik.http.routers.blumenau-frontend.middlewares=blumenau-security"

  # Simulador IoT (opcional, para desenvolvimento/testes)
  simulator:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: blumenau-flood-simulator
    command: ["python", "microcontrolador/simulator.py"]
    environment:
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
    depends_on:
      - backend
    networks:
      - internal
    restart: unless-stopped
    profiles:
      - simulator
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

networks:
  bravo-network:
    external: true
  internal:
    driver: bridge
    internal: true

volumes:
  logs:
    driver: local

